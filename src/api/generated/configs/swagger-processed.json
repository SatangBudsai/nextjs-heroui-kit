{
  "openapi": "3.0.0",
  "components": {
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "E36_Enums.massage_enum": {
        "type": "string",
        "enum": [
          "text",
          "image"
        ]
      },
      "Prisma.JsonValue": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "number",
            "format": "double"
          },
          {
            "type": "boolean"
          },
          {
            "$ref": "#/components/schemas/Prisma.JsonObject"
          },
          {
            "$ref": "#/components/schemas/Prisma.JsonArray"
          }
        ],
        "nullable": true,
        "description": "From https://github.com/sindresorhus/type-fest/\nMatches any valid JSON value."
      },
      "Prisma.JsonObject": {
        "properties": {},
        "additionalProperties": {
          "$ref": "#/components/schemas/Prisma.JsonValue"
        },
        "type": "object",
        "description": "From https://github.com/sindresorhus/type-fest/\nMatches a JSON object.\nThis type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from."
      },
      "Prisma.JsonArray": {
        "description": "From https://github.com/sindresorhus/type-fest/\nMatches a JSON array.",
        "properties": {},
        "type": "object",
        "additionalProperties": false
      },
      "DefaultSelection_Prisma._36_messagePayload_": {
        "properties": {
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "created_time": {
            "type": "string",
            "format": "date-time"
          },
          "user_read": {
            "$ref": "#/components/schemas/Prisma.JsonValue"
          },
          "message": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/E36_Enums.massage_enum"
          },
          "conversation_id": {
            "type": "string"
          },
          "sender_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "update_time",
          "created_time",
          "user_read",
          "message",
          "type",
          "conversation_id",
          "sender_id",
          "id"
        ],
        "type": "object"
      },
      "message": {
        "$ref": "#/components/schemas/DefaultSelection_Prisma._36_messagePayload_",
        "description": "Model message\nThis model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments\nThis model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info."
      },
      "E36_Enums.conversation_enum": {
        "type": "string",
        "enum": [
          "group",
          "singer"
        ]
      },
      "conversationType": {
        "properties": {
          "message": {
            "items": {
              "$ref": "#/components/schemas/messageType"
            },
            "type": "array",
            "nullable": true
          },
          "conversation_member": {
            "items": {
              "$ref": "#/components/schemas/conversation_memberType"
            },
            "type": "array",
            "nullable": true
          },
          "mst_app": {
            "allOf": [
              {
                "$ref": "#/components/schemas/applicationType"
              }
            ],
            "nullable": true
          },
          "profile": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/E36_Enums.conversation_enum"
              }
            ],
            "nullable": true
          },
          "app_id": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "profile",
          "name",
          "update_time",
          "created_time",
          "type",
          "app_id",
          "id"
        ],
        "type": "object"
      },
      "E36_Enums.type_user_enum": {
        "type": "string",
        "enum": [
          "string",
          "int"
        ]
      },
      "applicationType": {
        "properties": {
          "external_users": {
            "items": {
              "$ref": "#/components/schemas/external_usersType"
            },
            "type": "array",
            "nullable": true
          },
          "conversation": {
            "items": {
              "$ref": "#/components/schemas/conversationType"
            },
            "type": "array",
            "nullable": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "domain": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "update_time",
          "created_time",
          "logo",
          "name",
          "domain",
          "id"
        ],
        "type": "object"
      },
      "external_usersType": {
        "properties": {
          "application": {
            "allOf": [
              {
                "$ref": "#/components/schemas/applicationType"
              }
            ],
            "nullable": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type_user_enum": {
            "allOf": [
              {
                "$ref": "#/components/schemas/E36_Enums.type_user_enum"
              }
            ],
            "nullable": true
          },
          "headers": {
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "app_id": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "update_time",
          "created_time",
          "type_user_enum",
          "headers",
          "url",
          "app_id",
          "id"
        ],
        "type": "object"
      },
      "conversation_memberType": {
        "properties": {
          "conversation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/conversationType"
              }
            ],
            "nullable": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "nullable": true
          },
          "conversation_id": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "update_time",
          "created_time",
          "user_id",
          "conversation_id",
          "id"
        ],
        "type": "object"
      },
      "messageType": {
        "properties": {
          "conversation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/conversationType"
              }
            ],
            "nullable": true
          },
          "update_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "user_read": {
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/E36_Enums.massage_enum"
              }
            ],
            "nullable": true
          },
          "conversation_id": {
            "type": "string",
            "nullable": true
          },
          "sender_id": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "update_time",
          "created_time",
          "user_read",
          "message",
          "type",
          "conversation_id",
          "sender_id",
          "id"
        ],
        "type": "object"
      },
      "CreateMessageRequest": {
        "properties": {
          "message": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/E36_Enums.massage_enum"
          },
          "sender_id": {
            "type": "string"
          },
          "conversation_id": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "type",
          "sender_id",
          "conversation_id"
        ],
        "type": "object"
      },
      "external_usersCreateType": {
        "properties": {
          "update_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "created_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ]
          },
          "type_user_enum": {
            "allOf": [
              {
                "$ref": "#/components/schemas/E36_Enums.type_user_enum"
              }
            ],
            "nullable": true
          },
          "headers": {
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "app_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExternalUserResponse": {
        "properties": {
          "profile": {
            "type": "string",
            "nullable": true
          },
          "full_name": {
            "type": "string"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number",
                "format": "double"
              }
            ]
          }
        },
        "required": [
          "full_name",
          "id"
        ],
        "type": "object"
      },
      "getExternalUsersRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number",
                "format": "double"
              }
            ]
          },
          "app_id": {
            "type": "string"
          }
        },
        "required": [
          "user_id",
          "app_id"
        ],
        "type": "object"
      },
      "getManyExternalUsersRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "number",
                  "format": "double"
                },
                "type": "array"
              }
            ]
          },
          "app_id": {
            "type": "string"
          }
        },
        "required": [
          "user_id",
          "app_id"
        ],
        "type": "object"
      },
      "DefaultSelection_Prisma._36_conversationPayload_": {
        "properties": {
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "created_time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "$ref": "#/components/schemas/E36_Enums.conversation_enum"
          },
          "app_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "profile",
          "name",
          "update_time",
          "created_time",
          "type",
          "app_id",
          "id"
        ],
        "type": "object"
      },
      "conversation": {
        "$ref": "#/components/schemas/DefaultSelection_Prisma._36_conversationPayload_",
        "description": "Model conversation\nThis model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments\nThis model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info."
      },
      "conversationCreateType": {
        "properties": {
          "profile": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "update_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "created_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/E36_Enums.conversation_enum"
              }
            ],
            "nullable": true
          },
          "app_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "applicationCreateType": {
        "properties": {
          "update_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "nullable": true
          },
          "created_time": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ]
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "domain": {
            "type": "string",
            "nullable": true
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {}
  },
  "info": {
    "title": "realtime-chat-service",
    "version": "1.0.0",
    "description": "API Realtime Chat Service",
    "license": {
      "name": "MIT"
    },
    "contact": {}
  },
  "paths": {
    "/message/getAll": {
      "get": {
        "operationId": "GetAll",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/message"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "tags": [
          "Message"
        ],
        "security": [],
        "parameters": []
      }
    },
    "/message/history/{conversation_id}": {
      "get": {
        "operationId": "GetMessageHistoryByConversationId",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/messageType"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "tags": [
          "Message"
        ],
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ]
      }
    },
    "/message/create": {
      "post": {
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          }
        },
        "tags": [
          "Message"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageRequest"
              }
            }
          }
        }
      }
    },
    "/external-user/create": {
      "post": {
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external_usersType"
                }
              }
            }
          }
        },
        "tags": [
          "External User"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/external_usersCreateType"
              }
            }
          }
        }
      }
    },
    "/external-user/get": {
      "post": {
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalUserResponse"
                }
              }
            }
          }
        },
        "tags": [
          "External User"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getExternalUsersRequest"
              }
            }
          }
        }
      }
    },
    "/external-user/getMany": {
      "post": {
        "operationId": "GetMany",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ExternalUserResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "tags": [
          "External User"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getManyExternalUsersRequest"
              }
            }
          }
        }
      }
    },
    "/conversation/getConversationSinger": {
      "get": {
        "operationId": "GetConversationSinger",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conversationType"
                }
              }
            }
          }
        },
        "tags": [
          "Conversation"
        ],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "app_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sender_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "receiver_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/conversation/getManyConversationByUserId": {
      "get": {
        "operationId": "GetManyConversationByUserId",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/conversation_memberType"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "tags": [
          "Conversation"
        ],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "app_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ]
      }
    },
    "/conversation/getManyMemberInConversation": {
      "get": {
        "operationId": "GetManyMemberInConversation",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "tags": [
          "Conversation"
        ],
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/conversation/create": {
      "post": {
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/conversation"
                }
              }
            }
          }
        },
        "tags": [
          "Conversation"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/conversationCreateType"
              }
            }
          }
        }
      }
    },
    "/application/create": {
      "post": {
        "operationId": "CreateApplication",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationType"
                }
              }
            }
          }
        },
        "tags": [
          "Application"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/applicationCreateType"
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ]
}